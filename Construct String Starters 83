/*

Consider a string 
�
S consisting of lowercase Latin alphabets.
In one operation, you can pick an index from string 
�
S and replace the character at that index with 
3
3 occurrences of the same character.
For example, if 
�
=
dabc
S=dabc, in one operation, we can choose the index 
2
2 and replace 
�
2
S 
2
​
  with 
3
3 occurrences of 
�
2
S 
2
​
 . Thus, the string becomes 
�
=
d
aaa
‾
bc
S=d 
aaa
​
 bc.

Chefina has a string 
�
U of length 
�
N.
Help Chef design a string 
�
S of minimum length such that Chef can convert it to 
�
U using any (possibly zero) number of operations.

It is guaranteed that exactly one such 
�
S exists.

Input Format
The first line of input contains a single integer 
�
T, the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case consists of an integer 
�
N — the length of the string 
�
U.
The next line consists of string 
�
U.

*/


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	
	long int t,n,i;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    string s;
	   // map<char,int> mp;
	    cin>>s;
	    string res="";
	    int temp=1;
	    char var = s[0];
	    for(i=1;i<n;i++)
	    {
	        if(s[i] == var)
	        {
	            temp++;
	        }
	        else
	        {
	            if(temp%2 == 0)
	            {
	                res += var;
	                res += var;
	            }
	            else
	            {
	                res += var;
	            }
	            var = s[i];
	            temp=1;
	        }
	    }
	    
	    
	    if(temp%2 == 0)
	            {
	                res += var;
	                res += var;
	            }
	            else
	            {
	                res += var;
	            }
	    
	    
	    cout<<res<<endl;
	    
	    
	   // for(i=0;i<n;i++)
	   // {
	   //     mp[s[i]]++;
	   // }
	    
	   // string res="";
	    
	   // for(auto itr : mp)
	   // {
	        
	   //     if(itr.second %2 == 0)
	   //     {
	   //         res += itr.first;
	   //         res += itr.first;
	   //     }
	   //     else
	   //     {
	   //         res += itr.first;
	   //     }
	        
	        
	        
	       // res = res + itr.first;
	       // while(itr.second % 2 == 0 && itr.second %3 != 0)
	       // {
	       //     res += itr.first;
	       //     itr.second = itr.second - 3;
	       // }
	   // }
	   // cout<<res<<endl;
	    
	}
	
	return 0;
}
