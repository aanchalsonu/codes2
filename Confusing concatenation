/*
Chef initially had two non-empty arrays 
�
A and 
�
B, where both arrays contain distinct elements. Moreover, there is no common element in the arrays 
�
A and 
�
B.

Chef forms another array 
�
C from the arrays 
�
A and 
�
B using the following process :

Let 
�
X denote the leftmost element of array 
�
A and 
�
Y denote the leftmost element of array 
�
B.
If 
�
Y is smaller than 
�
X, delete 
�
Y from 
�
B and append it to the end of 
�
C.
If 
�
X is smaller than 
�
Y, delete 
�
X from 
�
A and append it to the end of 
�
C.
If either array 
�
A or 
�
B becomes empty, append all the remaining elements of the other array to the end of 
�
C.
Chef forgot the arrays 
�
A and 
�
B but remembers the array 
�
C. Find any two valid non-empty arrays 
�
A and 
�
B that will yield the given array 
�
C. If it is not possible, print 
−
1
−1.

Input Format
The first line of input will contain a single integer 
�
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains a space-separated integer 
�
N — the number of elements in array 
�
C.
The next line contains 
�
N space-separated integers denoting the elements of the array 
�
C.
Output Format
For each test case, if a solutions exists, print any two valid arrays 
�
A and 
�
B along with their lengths respectively 
*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
    
    
    
    	int n;
	cin>>n;
	while(n!=0){
	    int l,value,swt=1;
        cin>>l;
        int idx,max=INT32_MIN;
	    vector <int> c;
	    for(int i=0;i<l;i++){
	        cin>>value;
            c.push_back(value);
            if(max<value){
                max=value;
                idx=i;
            }
	    }
        if(idx==0){
            cout<<-1<<endl;
        }
        else{
            cout<<idx<<endl;
            for(int i=0;i<idx;i++){
                cout<<c[i]<<" ";
            }
            cout<<endl;
            cout<<l-(idx)<<endl;
            for(int i=idx;i<l;i++){
                cout<<c[i]<<" ";
            }
            cout<<endl;
        }
        n--;
	}
	// your code goes here
// 	long int t,n,i,j,x,maxi,idx;
// 	cin>>t;
// 	while(t--)
// 	{
// 	    cin>>n;
// 	   // long int c[n];
// 	   vector<int> c;
// 	   maxi=0;
// 	   idx=-1;
// 	    for(i=0;i<n;i++)
// 	    {
// 	        cin>>x;
// 	        c.push_back(x);
// 	        if(x>maxi)
// 	        {
// 	            maxi =x;
// 	            idx = i;
// 	        }
// 	    }
	    
	    
// 	    if(idx == 0)
// 	    {
// 	        cout<<-1<<endl;
// 	    }
// 	    else
// 	    {
// 	        cout<<idx<<endl;
// 	        for(i=0;i<idx;i++)
// 	        {
// 	            cout<<c[i]<<" ";
// 	        }
// 	        cout<<endl;
// 	        cout<<n-idx<<endl;
// 	        for(i=idx;i<n;i++)
// 	        {
// 	            cout<<c[i]<<" ";
// 	        }
// 	        cout<<endl;
// 	    }
	    
	   // i=0;
	   // j = n/2;
	   // vector<int> a,b;
	   // while(i<(n/2) && j <=n-1)
	   // {
	   //     if(c[i] < c[j])
	   //     {
	   //         a.push_back(c[i]);
	   //         i++;
	   //     }
	   //     else if(c[j] < c[i])
	   //     {
	   //         b.push_back(c[j]);
	   //         j++;
	   //     }
	   // }
	    
	   // if(i==0 && j==n)
	   // {
	   //     cout<<-1<<endl;
	   //     continue;
	   // }
	    
	   // while(i<(n/2))
	   // {
	   //     a.push_back(c[i]);
	   //     i++;
	   // }
	    
	   // while(j<=n-1)
	   // {
	   //     b.push_back(c[j]);
	   //     j++;
	   // }
	    
	    
	   // cout<<a.size()<<endl;
	   // for(i=0;i<a.size();i++)
	   // {
	   //     cout<<a[i]<<" ";
	   // }
	   // cout<<endl<<b.size()<<endl;
	   // for(i=0;i<b.size();i++)
	   // {
	   //     cout<<b[i]<<" ";
	   // }
	   // cout<<endl;
// 	}
	
	return 0;
}
