//Address calculation sort 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
struct node 
{
    int d;
    struct node *link;
};
typedef struct node nd;

int len(int );
void adrsort(int *,int );
nd * offset(int , nd * );
int main()
{
    // int a[]={12,23,1,2,3,5,7};
    int a[100];
    int i,n,j;
    printf("\nEnter size of array ");
    scanf("%d",&n);
    printf("\nEnter array elements ");
    for(i=0;i<n;i++)
    scanf("%d",&a[i]);
    adrsort(a,n);
    printf("\nSorted array is \n");
    for(i=0;i<n;i++)
    printf("%d ",a[i]);
    return 0;
}

int len(int n)
{
    int l=0;
    while(n !=0)
    {
        n= n/10;
        l++;
    }
    return l;
}
void adrsort(int *a,int n)
{
    nd *b[10]={0},*t;
    int i,j=0,index,hv,big=0;//hv - hash value 
    for(i=0;i<n;i++)
    {
        if(big < a[i])
        big=a[i];
    }
    hv = pow(10,len(big)-1);
    for(i=0;i<n;i++)
    {
        index = a[i]/hv;
        b[index]  = offset(a[i],b[index]);
    }
    for(i=0;i<10;i++)
    {
        t = b[i];
        while(t)
        {
            a[j++] = t->d;
            t = t->link;
        }
    }
    
}

nd * offset(int data, nd * r)
{
    nd *t,*p=0,*c=r;
    t = (nd *)malloc(sizeof(nd));
    t->d = data;
    t->link = 0;
    
    if(!r)
    return t;
    
    for(p=0,c=r; c && data > c->d ; p=c,c=c->link);
    if(p)
    p->link = t;
    
    t->link = c;
    if(!p)
    return t;
    return r;
}

