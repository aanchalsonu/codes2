
/*

A permutation of length 
�
N is an array of 
�
N integers 
�
=
[
�
1
,
�
2
,
…
,
�
�
]
P=[P 
1
​
 ,P 
2
​
 ,…,P 
N
​
 ] such that every integer from 
1
1 to 
�
N (inclusive) appears in it exactly once. For example, 
[
2
,
3
,
4
,
1
]
[2,3,4,1] is a permutation of length 
4
4.

A subsegment of an array 
�
[
�
…
�
]
=
[
�
�
,
�
�
+
1
,
…
,
�
�
A[L…R]=[A 
L
​
 ,A 
L+1
​
 ,…,A 
R
​
 ] is called good if the subsegment is a permutation of length 
(
�
−
�
+
1
)
(R−L+1). For example, the array 
�
=
[
2
,
3
,
1
,
4
,
2
]
A=[2,3,1,4,2] contains 
3
3 good subsegments: 
�
[
3
…
3
]
=
[
1
]
,
A[3…3]=[1], 
�
[
1
…
3
]
A[1…3] 
=
[
2
,
3
,
1
]
,
=[2,3,1], 
�
[
2
…
5
]
=
[
3
,
1
,
4
,
2
]
A[2…5]=[3,1,4,2].

You are given two integers 
�
N and 
�
K. Find a permutation of length 
�
N such that it contains exactly 
�
K good subsegments. Print -1 if no such permutation exists.

*/


#include <iostream>
using namespace std;

int main() {
	// your code goes here
	
	long int t,n,k;
	cin>>t;
	while(t--)
	{
	    cin>>n>>k;
	    if(n == 1 && k==1)
	    {
	        cout<<"1\n";
	    }
	    else if(k<2)
	    {
	        cout<<"-1\n";
	    }
	    else
	    {
	        for(int i=1;i<k;i++)
	        cout<<i<<" ";
	        for(int i=n;i>=k;i--)
	        cout<<i<<" ";
	        cout<<endl;
	    }
	}
	
	return 0;
}
