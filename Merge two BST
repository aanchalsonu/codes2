#include <bits/stdc++.h> 
/*************************************************************
    
    Following is the Binary Tree node structure:

    class TreeNode{

        public :
            int data;
            TreeNode *left;
            TreeNode *right;

            TreeNode(int data) {
                this -> data = data;
                left = NULL;
                right = NULL;
            }

            ~TreeNode() {
            if (left){
            delete left;
            }

            if (right){
            delete right;
            }
        }   
    };

*************************************************************/

void inorder(TreeNode<int>* root,vector<int> &bst )
{
    if(root == NULL)
    return;

    inorder(root->left,bst);
    bst.push_back(root->data);
    inorder(root->right, bst);

}

vector<int> merge(vector<int> a,vector<int> b)
{
    int i=0;
    int j=0;
    int k=0;
    int n= a.size()+b.size();
    vector<int> ans(n);

    while(i<a.size() && j<b.size())
    {
        if(a[i] < b[j])
        {
            ans[k++] = a[i];
            i++;
        }
        else
        {
            ans[k++] = b[j];
            j++;
        }
    }

    while(i<a.size())
    {
        ans[k++] = a[i];
        i++;
    }

    while(j<b.size())
    {
        ans[k++] = b[j];
        j++;
    }

    return ans;
}

TreeNode<int> * inordertoBst(int s,int e,vector<int>& in)
{
    if(s>e)
    return NULL;

    int mid = (s+e)/2;

    TreeNode<int> * temp = new TreeNode<int>(in[mid]);
    temp->left = inordertoBst(s,mid-1,in);
    temp->right = inordertoBst(mid+1,e,in);
    return temp;


}

TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    //vectors to store inorder of the bst

    vector<int> bst1;
    vector<int> bst2;

    inorder(root1,bst1);
    inorder(root2,bst2);

    //merged array to store the sorted bst from bst1 and bst2 
    vector<int> merged = merge(bst1,bst2);
    int s=0;
    int e= merged.size()-1;
    TreeNode<int> * newroot = inordertoBst(s,e,merged);

    return newroot;

}
