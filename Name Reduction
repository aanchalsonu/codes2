/*
In an attempt to reduce the growing population, Archer was asked to come up with a plan. Archer being as intelligent as he is, came up with the following plan:

If NN children, with names C_{1}, C_{2}, ... , C_{N}C 
1
​
 ,C 
2
​
 ,...,C 
N
​
 , are born to parents with names AA and BB, and you consider CC to be the concatenation of all the names of the children, i.e. C = C_{1} + C_{2} + ... + C_{N}C=C 
1
​
 +C 
2
​
 +...+C 
N
​
  (where ++ is concatenation operator), then CC should be a substring of one of the permutations of A + BA+B.

You are given the task to verify whether the names parents propose to give their children are in fact permissible by Archer's plan or not.

*/


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i,f;
	cin>>t;
	while(t--)
	{
	    string a,b,x,y,c;
	    cin>>a>>b;
	    x = a+b;
	    cin>>n;
	    y = "";
	    for(i=0;i<n;i++)
	    {
	        cin>>c;
	        y = y+c;
	    }
	    f=0;
	   // for(i=0;i<y.length();i++)
	   // {
	   //     if(x.find(y[i]) == std::string::npos)
	   //     {
	   //         cout<<"NO\n";
	   //         f=1;
	   //         break;
	   //     }
	   // }

	    
	    map<int,int> mp;
	    for(i=0;i<x.length();i++)
	    {
	        mp[(x[i])-'a']++;
	    }
	    for(i=0;i<y.length();i++)
	    {
	        if(mp[(y[i])-'a'] < 1)
	        {
	            cout<<"NO\n";
	            f=1;
	            break;
	        }
	        else
	        {
	            mp[(y[i])-'a']--;
	        }
	    }
	    if(f==0)
	    {
	        cout<<"YES\n"; 
	    }
	   // index = x.find(y,0);
	   // if(index >=0 && index <= x.length())
	   // {
	   //     cout<<"YES\n";
	   // }
	   // else
	   // {
	   //     cout<<"NO\n";
	   // }
	}
	return 0;
}


