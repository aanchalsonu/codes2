/*

Chef is stuck in the wavey world of polynomials. You are given all 
�
N roots of a polynomial 
�
(
�
)
=
∏
�
=
1
�
(
�
−
�
�
)
P(x)=∏ 
i=1
N
​
 (x−a 
i
​
 ). The roots are pairwise distinct integers, but they are not given in any particular order.

To help Chef escape, you should answer 
�
Q queries (numbered 
1
1 through 
�
Q). For each valid 
�
i, in the 
�
i-th query, you are given an integer 
�
�
x 
i
​
  and you have to determine whether 
�
(
�
�
)
P(x 
i
​
 ) is positive, negative or 
0
0.

Input
The first line of the input contains two space-separated integers 
�
N and 
�
Q.
The second line contains 
�
N space-separated integers 
�
1
,
�
2
,
…
,
�
�
a 
1
​
 ,a 
2
​
 ,…,a 
N
​
 .
�
Q lines follow. For each valid 
�
i, the 
�
i-th of these lines contains a single integer 
�
�
x 
i
​
  describing the 
�
i-th query.
Output
For each query, print a single line containing the string "POSITIVE", "NEGATIVE" or "0" (without quotes) describing the value of the polynomial for the 
�
i-th query.

*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	
	long int n,q,x,j;
	cin>>n>>q;
	vector<int> a(n);
	for(int i=0;i<n;i++)
	{
	    cin>>a[i];
	}
	sort(a.begin(),a.end());
	
	while(q--)
	{
	   // int ans = 1,i;
	    cin>>x;
	    
	    // APPLY BINARY SEARCH TO FIND THE ELEMENT IN THE ARRAY 
	    //WHILE DOING SO IF THE HIGH POINTER REACHES -1 WHICH MEANS THAT ALL THE LEEMENTS IN THE ARRAY ARE GRETAER THAN X AND HENCE THE OUTPUT MOST PROBABLY WILL BE POSITIVE
	    //FOR THIS NOW CHECK IF THE NUMBER OF ELEMENTS ARE EVEN OR ODD
	    // IF EVEN THEN ANSWER IS NEGATIVE ELSE POSITIVE 
	    //NEXT CONDITION IS IF THE LOW POINTER REACHES N THEN THE ANSWER IS POSITIVE 
	    //THE LAST CONDITION IS BASED ON IF N-HIGH-1 IS EVEN NUMBER OF TIMES THEN IT IS NEGATUVE
	    long int low=0,high = n-1,mid=0;
	    int flag=0;
	    
	    while(low<=high)
	    {
	        mid = (low+high)/2;
	        if(a[mid] == x)
	        {
	            flag=1;
	            break;
	        }
	        else if(x < a[mid])
	        high = mid-1;
	        else 
	        low = mid+1;
	    }
	    
	    if(flag)
	    {
	        cout<<0<<endl;
	    }
	    else 
	    {
	        if(high  == -1)
	        {
	            if(n%2)
	            cout<<"NEGATIVE\n";
	            else
	            cout<<"POSITIVE\n";
	        }
	        else if(low == n)
	        {
	            cout<<"POSITIVE\n";
	        }
	        else{
	            if((n - high - 1) % 2)
	            {
	                cout<<"NEGATIVE\n";
	            }
	            else
	            cout<<"POSITIVE\n";
	        }
	    }
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	   // for(i=0;i<n;i++)
	   // {
	   //     ans = ans * (x-a[i]);
	   // }
	   // if(ans>0)
	   // {
	   //     cout<<"POSITIVE\n";
	   // }
	   // else if(ans < 0)
	   // {
	   //     cout<<"NEGATIVE\n";
	   // }
	   // else if(ans == 0)
	   // cout<<0<<endl;
	}
	

	return 0;
}
