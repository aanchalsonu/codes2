/*
There are NN tasks waiting in line to be executed. The execution time for the i^{th}i 
th
  task is A_iA 
i
â€‹
  seconds.

Chef has two processors to execute these NN tasks. Both these processors work simultaneously. Each processor executes the assigned tasks one by one.

Chef assigns a prefix of these tasks to the first processor and the remaining tasks to the second processor.

For example, if there are 33 tasks, Chef can do one of the following:

Assign no task to the first processor. This means, the second processor will execute tasks 1, 21,2 and 33.
Assign task 11 to the first processor. This means, the second processor will execute tasks 22 and 33.
Assign tasks 11 and 22 to the first processor. This means, the second processor will execute task 33.
Assign tasks 1, 21,2 and 33 to the first processor. Thus, second processor would execute no tasks.
Find the minimum time in which all the tasks can be executed.
*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i,j;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    long int a[n],sum1=0,sum2=0;
	    for(i=0;i<n;i++)
	    {
	        cin>>a[i];
	    }
	    // sort(a,a+n);
	    if(n==1)
	    {
	        cout<<a[0]<<endl;
	    }
	    else 
	    {
	        sum1 = a[0];
	        sum2= a[n-1];
	        i = 1;
	        j = n-2;
	        while(i<=j)
	        {
	            if(sum2>sum1)
	            {
	                sum1 = sum1+a[i];
	                i++;
	            }
	            else
	            {
	                sum2 = sum2+a[j];
	                j--;
	            }
	        }
	        cout<<max(sum1,sum2)<<endl;
	    }
	}
	return 0;
}
