/*
There's an array A consisting of N non-zero integers A1..N. A subarray of A is called alternating if any two adjacent elements in it have different signs 
(i.e. one of them should be negative and the other should be positive).

For each x from 1 to N, compute the length of the longest alternating subarray that starts at x - that is, a subarray Ax..y for the maximum possible y â‰¥ x.
The length of such a subarray is y-x+1.
*/

#include <iostream>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i,j,c;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    long int a[n],b[n];
	    for(i=0;i<n;i++)
	    {
	        cin>>a[i];
	    }
	    b[n-1] = 1;
	    for(i=n-2;i>=0;i--)
	    {
	        if((a[i]*a[i+1]) < 0)
	        {
	            b[i] = b[i+1]+1;
	        }
	        else
	        {
	            b[i] =1;
	        }
	    }
	    
	   // for(i=0;i<n;i++)
	   // {
	   //     for(j=i+1,c=1;j<n;j++)
	   //     {
	   //        if(a[j-1] <0 && a[j]>0 || a[j-1] >0 && a[j]<0)
	   //        {
	   //            c++;
	   //        }
	   //        else
	   //        {
	   //            break;
	   //        }
	   //     }
	   //     b[i] = c;
	   // }
	    for(i=0;i<n;i++)
	    {
	        cout<<b[i]<<" ";
	    }
	    cout<<endl;
	}
	return 0;
}
