/*
Chef has two piles of stones with him, one has n1 stones and the other has n2 stones. Fired up by boredom, he invented a game with the two piles.

Before the start of the game Chef chooses an integer m.

In the j-th move:

He chooses a number xj such that 1 ≤ xj ≤ m, and removes xj stones from both the piles (this is only possible when both the piles have ≥ xj stones).
The number chosen must be unique over all the moves in the game. That is, for all k < j, xj ≠ xk.
The game stops when Chef is unable to make any more moves.

Chef wants to make the moves in such a way that the sum of the number of stones remaining in the two piles is minimized. Please help Chef find this.
*/


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int t,n1,n2,m,i,j;
	cin>>t;
	while(t--)
	{
	    cin>>n1>>n2>>m;
	    
	    i = (m*(m+1))/2;
	    if(i>= n1 || i>=n2)
	    {
	        cout<<abs(n1-n2)<<endl;
	    }
	    else
	    {
	        cout<<abs(n1+n2-(2*i))<<endl;
	    }
	    
	    
	   // if(m*(m+1)/2 >= n1+n2)
	   // {
	   //     cout<<abs(n1-n2)<<endl;
	   // }
	   // else if(m*(m+1)/2 < (n1+n2))
	   // {
	   //     cout<<abs(n1+n2-(m*(m+1)))<<endl;
	   // }
	   // for(i=1;i<=m;i++)
	   // {
	   //     if(i<=n1 && i<= n2)
	   //     {
	   //         n1 = n1-i;
	   //         n2 = n2-i;
	   //     }
	   // }
	   // cout<<(n1+n2)<<endl;
	    
	   // cout<<(max(n1,n2) - m)<<endl;
	}
	
	return 0;
}
