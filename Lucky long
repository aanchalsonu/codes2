/*
Chef loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits
4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Chef has a positive integer N. He can apply any of the following operations as many times as he want in any order:

Add 1 to the number N.
Take some digit of N and replace it by any non-zero digit.
Add any non-zero leading digit to N.
Find the minimum number of operations that is needed for changing N to the lucky number.

Input
The first line contains a single positive integer T, the number of test cases. T test cases follow. The only line of each test case 
contains a positive integer N without leading zeros.

Output
For each T test cases print one integer, the minimum number of operations that is needed for changing N to the lucky number.
/*



#include <iostream>
using namespace std;

int main() {
	// your code goes here
	
	long int t,n,ans;
	cin>>t;
	while(t--)
	{
	    
	    string s;
	    cin>>s;
	    long int count=0;
	    for(auto i : s)
	    {
	        if(i != '4' && i!='7')
	        count++;
	    }
	    cout<<count<<endl;
	    
	   // cin>>n;
	   // ans=0;
	   // while(n!=0)
	   // {
	   //     int r =n%10;
	   //     if(r!=4 && r!=7)
	   //     ans++;
	       
	   //     n = n/10;
	   // }
	   // cout<<ans<<endl;
	}
	return 0;
}
