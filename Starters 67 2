/*
You are given an array A = [A_1, A_2, \ldots, A_N]A=[A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 ].

Is it possible to partition AA into two non-empty subsequences S_1S 
1
​
  and S_2S 
2
​
  such that sum(S_1) \times sum(S_2)sum(S 
1
​
 )×sum(S 
2
​
 ) is odd?

Here, sum(S_1)sum(S 
1
​
 ) denotes the sum of elements in S_1S 
1
​
 , and sum(S_2)sum(S 
2
​
 ) is defined similarly.

Note: S_1S 
1
​
  and S_2S 
2
​
  must partition AA, that is:

S_1S 
1
​
  and S_2S 
2
​
  must be non-empty
Every element of AA must be in either S_1S 
1
​
  or S_2S 
2
​
 
S_1S 
1
​
  and S_2S 
2
​
  must be disjoint (in terms of which indices their subsequences represent)
  */
  #include <iostream>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i,j,s1,s2;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    long int a[n];
	    s1=0;
	   // s2=0;
	    for(i=0;i<n;i++)
	    {
	        cin>>a[i];
	        if(a[i]%2 == 1)
	        {
	            s1++;
	        }
	        
	    }
	    if(s1 ==0 || s1%2 )
	    {
	        cout<<"NO\n";
	    }
	   else
	   {
	       cout<<"YES\n";
	   }
	   // for(i=0,j=n-1;i<n/2 && j>=(n/2);)
	   // {
	   //     if(a[i] == a[i+1])
	   //     {
	   //         s1 = s1 + a[i];
	   //         s2 = s2 + a[i+1];
	   //         i = i+2;
	   //     }
	   //     else if(a[j] == a[j-1])
	   //     {
	   //         s1 = s1 + a[j];
	   //         s2 = s2 + a[j-1];
	   //         j = j-2;
	   //     }
	   //     else
	   //     {
	   //         s1 = s1 + a[i];
	   //         s2 = s2 + a[j];
	   //         i++;
	   //         j--;
	   //     }
	        
	   //    //if(i%2 == 0 && a[i] != a[i+1])
	   //    //{
	   //    //    s1 = s1 + a[i];
	   //    //    i++;
	   //    //}
	   //    //else if(a[i] == a[i+1])
	   //    //{
	   //    //    s1 = s1+a[i];
	   //    //    s2 = s2 + a[i+1];
	   //    //    i = i+2;
	   //    //}
	   //    //else
	   //    //{
	   //    //    s2 = s2 + a[i];
	   //    //    i++;
	   //    //}
	   // }
	    
	    
	   // while(i<(n/2))
	   // {
	   //     s1 = s1 + a[i];
	   //     i++;
	   // }
	   // while(j>=(n/2))
	   // {
	   //     s2 = s2 + a[j];
	   //     j--;
	   // }
	   // if(s1%2 !=0 && s2%2 !=0)
	   // {
	   //     cout<<"YES\n";
	   // }
	   // else
	   // {
	   //     cout<<"NO\n";
	   // }
	    
	}
	return 0;
}
