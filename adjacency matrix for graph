//graphs using adjacency matrix
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

short int visited[5]={0};
short int visited1[5][5]={0};
int f=0,r=-1;
int q[5];
// void dfs(int v,int **a, int n)
// {
//     int j;
//     visited[v] = 1;
//     printf("%d ",v);
//     for(int i=1;i<=n;i++)
//     for(j=1;j<=n;j++)
//     if(!visited[j] && a[i][j] == 1)
//     dfs(j,a,n);
// }

void dfs(int **a , int i,int n)
{
    visited[i] = 1;
    printf("%d ",i);
    for(int j=1;j<=n;j++)
    if(!visited[j] && a[i][j] == 1)
    dfs(a,j,n);
}


// void dfs(int i, int j,int **a , int n)
// {
    
//         printf("%d ",i);
//         // visited[i][] = 1;
    
//     for(int k=1;k<=n;k++)
//     {
//         if((!visited[i][k] && !visited[k][1]) && a[i][k] == 1)
//         {
//             visited[i][k] = 1;
//             dfs(k,1,a,n);
//         }
//     }
    
// }
void addq(int v)
{
    q[++r] = v;
}
int deleteq()
{
    return q[f++];
}
void bfs(int ** a, int n,int a1, int b1)
{
    int i=0,j;
    printf("\n%d ",a1);
    visited1[a1][1] = 1;
    addq(a1);
    while(r>=f)
    {
         a1 = deleteq();   
        for(i=a1;i<=n;i++)
        for(j=1;j<=n;j++)
        if((!visited1[i][j]) && a[i][j] == 1)
        {
            printf("%d ",j);
            addq(j);
            visited1[i][j]= 1;
        }
    
       
        
    }
}
int main()
{
    int ** a=0;
    int i,n,j,k;
    FILE *fp  = fopen("graphdata.txt","r") ;
    printf("\nEnter value of n ");
    fscanf(fp,"%d",&n);
    // scanf("%d",&n);
    a = (int **)malloc(sizeof(int *)*n);
    for(k=1;k<=n;k++)
    {
        a[k] = (int *)malloc(sizeof(int )*n);
        printf("\nEnter matrix of vertex %d  ",k);
        for(j=1;j<=n;j++)
        fscanf(fp,"%d",&a[k][j]);
        // scanf("%d",&a[k][j]);
    }
    printf("\n");
    for(i=1;i<=n;i++)
    {
        if(!visited[i])
        {
            visited[i] = 1;
            // printf("%d ",i);
            dfs(a,i,n);
        }
    }
    // dfs(1,1,a,n);
    printf("\n");
    bfs(a,n,1,2);
   
}


