/*
Chef decided to teach some advanced recipes to junior chefs. On the very first day of their cooking sessions, to identify the cooking abilities of each junior chef, Chef instructed them to make their premier dishes. The junior chefs were very excited and they all went into the kitchen to cook their dishes.

Chef has a limited number of jars in the kitchen. The jars are magical ― if a chef that is cooking a dish requiring 
�
x ingredients takes 
�
x jars, each of these jars fills itself with one of the required ingredients, and after this chef finishes cooking and returns the jars to the kitchen, they empty themselves (and are ready for other chefs to take some or all of them). Of course, this means it is impossible to cook a dish requiring 
�
x ingredients with less than 
�
x jars.

Since Chef did not tell the junior chefs in which order they should prepare their dishes, they started picking up jars simultaneously and in the end, no junior chef was able to acquire enough jars to prepare their premier dish. Also, none of the junior chefs are willing to lend their jars to others. Chef was unable to handle the situation and decided to call off the cooking session for that day, so that he could get more jars and try it again later.

i that has not prepared their dish yet, the cooking session is a failure.
Otherwise, one of the chefs who have at least as many jars as the number of required ingredients prepares their dish and returns their jars to the kitchen.
Whenever some jars are returned to the kitchen, they are immediately taken by some chefs that have not prepared their dishes yet (possibly all the jars by one chef).
This process continues with chefs taking jars, cooking their dishes and returning jars, until no chef can cook their dish anymore or all chefs have cooked their dishes.
When all junior chefs have successfully cooked their dishes, the cooking session ends successfully.
Chef wants to know the minimum number of magical jars that should be present in the kitchen initially so that the session would be successful regardless of how the junior chefs pick up the jars. Chef is a legendary cook, but he is not very good at mathematics, so he asks you to find that number.

*/

#include <iostream>
using namespace std;

int main() {
	// your code goes here
  /*All the Junior Chefs are picking up jars simultaneously and none of the junior chefs are able to acquire enough jars to prepare their dish.
  Assuming every junior chef is accruing exactly "Required-1" Jars.. so that all can fail to prepare their dish. And Session failed declared.
  After that only one additional jar is needed so that, first junior chef complete their dish and returns all the jars to the kitchen and other 
  junior chef will pick that to prepare their dish.*/
  
	long int t,n;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    long int a[n];
	    long int maxi= 0;
	    for(long int i=0;i<n;i++)
	    {
	        cin>>a[i];
	        maxi = maxi + a[i]-1;
	    }
	    cout<<maxi+1<<endl;
	}
	
	return 0;
}
