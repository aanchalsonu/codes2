/*
You are given a binary string SS of length NN.

You can perform the following operation on SS:

Select an index i \ (1 \leq i \lt |S|)i (1≤i<∣S∣) such that S_i=S_{i+1}S 
i
​
 =S 
i+1
​
 .
Set S_iS 
i
​
  to 00 and remove S_{i+1}S 
i+1
​
  from the string.
Note that after each operation, the length of SS decreases by 11.

Is it possible to reduce SS to a single character by performing the mentioned operation exactly N-1N−1 times?
*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i,j,f,k;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    string str;
	   // char a[100];
	    cin>>str;
	    stack<char>s;
	    s.push(str[0]);
	    for(i=1;i<n;i++)
	    {
	        if(s.top() == str[i])
	        {
	            s.pop();
	            s.push('0');
	        }
	        else
	        {
	            s.push(str[i]);
	        }
	    }
	    if(s.size() == 1)
	    {
	        cout<<"YES\n";
	    }
	    else
	    {
	        char ch = s.top();
	        s.pop();
	        while(!s.empty() && s.top() == ch)
	            s.pop();
	        if(s.empty())
	        {
	            cout<<"YES\n";
	        }
	        else
	        {
	            cout<<"NO\n";
	        }
	    }
	   // f=0;
	   // k=0;
	   // for(i=0;i<n;)
	   // {
	   //     if(s[i] != s[i+1])
	   //     {
	   //         cout<<"NO\n";
	   //         f=1;
	   //         i++;
	   //         break;
	   //     }
	   //     else
	   //     {
	   //         a[k] = '0';
	   //         i = i +2;
	   //         k++;
	   //     }
	   // }
	   //// for(i=0;i<k;i++)
	   //// {
	   ////     if(a[k] != a[k+1])
	   ////     {
	   ////        // cout<<"NO\n";
	   ////         f=1;
	   ////         break;
	   ////     }
	   //// }
	   //// if(f == 1)
	   //// {
	   ////     cout<<"NO\n";
	   //// }
	   // if(f != 1)
	   // {
	   //     cout<<"YES\n";
	   // }
	}
	
	return 0;
}
