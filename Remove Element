/*
You are given an array A = [A_1, A_2, \ldots, A_N]A=[A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 ] consisting of NN positive integers.

You are also given a constant KK, using which you can perform the following operation on AA:

Choose two distinct indices ii and jj such that A_i + A_j \le KA 
i
​
 +A 
j
​
 ≤K, and remove either A_iA 
i
​
  or A_jA 
j
​
  from AA.
Is it possible to obtain an array consisting of only one element using several (possibly, zero) such operations?

*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i,mx,mn,k;
	cin>>t;
	while(t--)
	{
	    cin>>n>>k;
	    long int a[n];
	    mx = 0;
	    mn = INT_MAX;
	    for(i=0;i<n;i++)
	    {
	        cin>>a[i];
	        mx = max(mx,a[i]);
	        mn = min(mn,a[i]);
	    }
	    if(n == 1)
	    {
	        cout<<"YES"<<endl;
	        continue;
	    }
	   
	        if(mx+mn <= k)
	        {
	            cout<<"YES\n";
	        }
	        else
	        {
	            cout<<"NO\n";
	        }
	    
	}
	return 0;
}
