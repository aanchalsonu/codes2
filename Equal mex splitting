/*

Chef has an array AA of length NN. Chef wants to select some disjoint, non-empty subarrays from AA such that:

The mexmex of each of the selected subarray is the same.
Note that the selected subarrays need not cover all the elements of the array.

For e.g. if A = [2, 0, 1, 6, 2, 1, 3, 0, 7]A=[2,0,1,6,2,1,3,0,7], then one way in which Chef can select subarrays is as following: {[0, 1], [1, 3, 0]}[0,1],[1,3,0] 
(Here mexmex of both of them is 22).

Chef wants to select the maximum number of disjoint, non-empty subarrays that satisfy the above condition. Can you help him to do so?

Note: An array XX is called a subarray of an array YY if XX can be obtained from YY by deletion of several (possibly, zero or all) elements from the beginning and 
several (possibly, zero or all) elements from the end. Also, mexmex of a subarray is the smallest non-negative number that does not occur in that subarray.

*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int  t,n,j,i,c;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    long int a[n],co=0;
	    c=0;
	    for(i=0;i<n;i++)
	    {
	        cin>>a[i];
	        if(a[i] == 0)
	        {
	            c++;
	        }
	        else
	        co++;
	    }
	    if(c>=co)
	    {
	        cout<<c<<endl;
	    }
	    else
	    {
	        cout<<co<<endl;
	    }
	   // sort(a,a+n);
	   // for(i=0,j=n-1;i<=(n/2) && j>=(n/2);i++,j--)
	   // {
	   //     m[i] = min(a[i],a[j]);
	   // }
	   // if(m[0] == m[1])
	   // {
	   //     c++;
	   // }
	   // for(i=1;i<n/2;i++)
	   // {
	   //     if(m[i] == m[i-1])
	   //     c++;
	   // }
	   // cout<<c<<endl;
	}
	return 0;
}
