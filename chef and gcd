/*

Chef has two positive integers 
�
X and 
�
Y. Now Chef wants to perform some number of operations (possibly zero) on them. In each operation, Chef can choose either 
�
X or 
�
Y and increment it by 
1
1. Find the minimum number of operations Chef needs to perform so that there is a positive integer strictly greater than 
1
1 which divides both 
�
X and 
�
Y (In other words, the greatest common divisor of 
�
X and 
�
Y should be greater than 
1
1).

Input Format
The first line contains a single integer 
�
T denoting the number of test cases. The description of 
�
T test cases follows.
The first and only line of each test case contains two integers 
�
X and 
�
Y.
Output Format
For each test case, print a single line containing one integer — the minimum number of operations Chef needs to perform.


*/



#include<bits/stdc++.h>
#include <iostream>
using namespace std;

long int gcd(long int a, long int b){
    if(b == 0)
        return a;
    return gcd(b,a%b);
}

int main() {
	// your code goes here
	
	long int t,x,y,c;
	cin>>t;
	while(t--)
	{
	    cin>>x>>y;
	    
	    
	    if(gcd(x,y) > 1)
	    cout<<0<<endl;
	    else
	    {
	        if(x%2 == 0 && y%2 ==0 )
	        {
	            cout<<0<<endl;
	        }
	        else if(x%2 ==0 && y%2 !=0)
	        {
	            cout<<1<<endl;
	        }
	        else if(x%2!=0 && y%2 ==0)
	        {
	            cout<<1<<endl;
	        }
	        else if(x%2 ==1  && y%2 ==1)
	        {
	            int i = gcd(x+1,y);
	            int j = gcd(x,y+1);
	            if(i>1 || j>1)
	            {
	                cout<<1<<endl;
	            }
	            else
	            cout<<2<<endl;
	        }
	    }
	    
	    
	    
	    
	    
	    
	    
	    
	   // c=0;
	   // int i = min(x,y);
	   // int j = max(x,y);
	   // while(gcd(i,j) <= 1)
	   // {
	   //     i++;
	   //     c++;
	   // }
	   // cout<<c<<endl;
	}
	return 0;
}
