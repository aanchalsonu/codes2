/*
For a given NN, find the number of ways to choose an integer xx from the range [0, 2^N - 1][0,2 
N
 −1] such that x \oplus (x+1) = (x+2) \oplus (x+3)x⊕(x+1)=(x+2)⊕(x+3), where \oplus⊕ denotes the bitwise XOR operator.

Since the number of valid xx can be large, output it modulo 10^9+710 
9
 +7.
 */
 
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	long int t,n,i;
	cin>>t;
	vector<int> v(1000001);
	v[0]=1;
	for(i=1;i<1000001;i++)
	{
	    v[i] =(v[i-1]*2)%1000000007; 
	}
	while(t--)
	{
	    cin>>n;
	    cout<<v[n-1]<<endl;
	}
	return 0;
}
