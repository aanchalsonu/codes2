/*

JJ loves playing with averages. He has an array 
�
A of length 
�
N. He wants to divide the array 
�
A into two non-empty subsets 
�
P and 
�
Q such that the value of 
�
�
�
�
(
�
)
+
�
�
�
�
(
�
)
mean(P)+mean(Q) is as large as possible. (Note that each 
�
�
A 
i
​
  must belong to either subset 
�
P or subset 
�
Q).

Help him find this maximum value of 
�
�
�
�
(
�
)
+
�
�
�
�
(
�
)
mean(P)+mean(Q).

As a reminder, the mean of a subset 
�
X of size 
�
M is defined as: 
�
�
�
�
(
�
)
=
∑
�
=
1
�
�
�
�
mean(X)= 
M
∑ 
i=1
M
​
 X 
i
​
 
​
 .

For example, 
�
�
�
�
(
[
3
,
1
,
4
,
5
]
)
=
3
+
1
+
4
+
5
4
=
3.25
mean([3,1,4,5])= 
4
3+1+4+5
​
 =3.25.

Input Format
The first line contains 
�
T - the number of test cases. Then the test cases follow.
The first line of each test case contains an integer 
�
N - the size of the array 
�
A.
The second line of each test case contains 
�
N space-separated integers 
�
1
,
�
2
,
…
,
�
�
A 
1
​
 ,A 
2
​
 ,…,A 
N
​
  denoting the array 
�
A.

*/


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	
	    //THE IDEA IS TO FIND THE SUM OF ALL ELEMENTS EXCEPT THE MAXIMUM ELEMENT AND THEN FIND AVERAGE OF ALL OF THOSE ELEMENTS. THIS IS FIRST PART
	    //SECOND PART IS THE ONLY MAXIMUM NUMBER IN THE ARRAY
    
	
	long int t;
	cin>>t;
	while(t--)
	{
	    int n,i,j;
	    cin>>n;
	    int a[n];
	    for(i=0;i<n;i++)
	    cin>>a[i];
	    
	    sort(a,a+n);
	    
	    float sum=0,ans=0;
	    for(i=0;i<n;i++)
	    sum = sum + a[i];
	    
	    ans = (sum-a[n-1])/(n-1);
	    ans = ans + a[n-1];
	    
	    
	    cout<<fixed<<setprecision(6)<<ans<<endl;
	}
	

	return 0;
}
