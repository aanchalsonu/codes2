/*

Chef is at a Code Expo where many coders are present discussing, solving, sharing, and eavesdropping on solutions :P

He recently learnt that a former HackerPlant employee, Reziba, who is now working at KodeKarma stole some questions for their KoolKontest. Chef wants to
find Reziba, but the only data he has on him, and everyone else present, are their CodeXP ratings, which are distinct.

Chef decides to find Reziba through his rating by asking different people present at the expo. Everyone present are arranged in such a way that, assuming
a person with rating X, every person with a rating higher than X are on the person's right, while every person with a rating lower than X are on the person's left.

Everyone present there knows Reziba's rating, except Chef, who now asks people where he could find Reziba.

Chef initially asks an arbitrary person, who replies by giving information on whether Reziba is to the person's left or the person's right, depending on 
whether this person has a higher or lower rating than Reziba.
Chef proceeds in that direction for an arbitrary distance and stops and asks the next person encountered, and repeats this procedure.
However, Chef will never go beyond a person whose rating Chef has asked before. For example, if Chef was walking to the left and finds a person who already
told him to walk to the right then he will not continue going to the person's left.
Chef finally finds Reziba when he finally stops in front of Reziba.

During Chef's search for Reziba, he wrote the sequence of ratings of the people Chef asked in the exact same order, including Reziba's rating, which is the
last integer in the sequence.
Towards the end, Chef feels he might've made a mistake while writing this sequence.

Given the sequence that Chef wrote and Reziba's rating, find out whether this sequence is possible or has mistakes.

*/



#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	
	long int t,n,x,i,y,j;
	cin>>t;
	while(t--)
	{ int n, x;
    bool flag = false;
    
    cin >> n >> x;
    
    vector<int> v(n);
    
    for(auto &it : v)
        cin >> it;
        
    int lo = 0, hi = 1e9 + 1;    
        
    for(int i = 0; i < n - 1; i ++) {
        if (v[i] < x && v[i] > lo)
            lo = v[i];
        else if (v[i] > x && v[i] < hi)
            hi = v[i];
        else {
            flag = true;
            break;
        }
    }
    
    (flag) ? cout << "NO\n" : cout << "YES\n";
	}
	return 0;
}
