/*Chef has an array AA of length NN. He defines the alternating sum of the array as:

S = |A_1| - |A_2| + |A_3| - |A_4| + \ldots (-1)^{N-1}\cdot |A_N|S=∣A 
1
​
 ∣−∣A 
2
​
 ∣+∣A 
3
​
 ∣−∣A 
4
​
 ∣+…(−1) 
N−1
 ⋅∣A 
N
​
 ∣
Chef is allowed to perform the following operation on the array at most once:

Choose two indices ii and jj (1 \leq i < j \leq N)(1≤i<j≤N) and swap the elements A_iA 
i
​
  and A_jA 
j
​
 .
Find the maximum alternating sum Chef can achieve by performing the operation at most once.

Note: |X|∣X∣ denotes the absolute value of XX. For example, |-4| = 4∣−4∣=4 and |7| = 7∣7∣=7.

*/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
// void swap(int a ,int b)
// {
//     int temp = a;
//     a = b;
//     b = temp;
// }
int main() {
	// your code goes here
	long int t,n,i,j,sum,maxvalue,count;
	cin>>t;
	
	while(t--)
	{
	    cin>>n;
	    long int a[n];
	    maxvalue=INT_MAX;
	    count = 0;
	    sum=0;
	   // f=0;
	    for(i=0;i<n;i++)
	    {
	        cin>>a[i];
	    }
	    for(i=0;i<n;i++)
	    {
	        if(i%2==0)
	        {
	            maxvalue = min(maxvalue,abs(a[i]));
	            sum = sum +abs(a[i]);
	        }
	        else
	        {
	            count = max(count,abs(a[i]));
	            sum = sum - abs(a[i]);
	        }
	    }
	    cout<<max(sum,sum+(2*(count-maxvalue)))<<endl;
	   // sum = abs(a[0]);
	   // for(i=1;i<n;i++)
	   // {
	   //     if(f==0)
	   //     for(j=i+1;j<n;j++)
	   //     {
	   //         if((abs(a[i]) > a[j]) && (j%2 == 0) && a[j] != 0)
	   //         {
	   //             swap(a[i],a[j]);
	   //             f=1;
	   //             break;
	   //         }
	   //     }
	        
	   // }
	   // for(i=1;i<n;i++)
	   // {
	   //     if(i%2 == 0)
	   //     {
	   //         sum = sum + abs(a[i]);
	   //     }
	   //     else
	   //     {
	   //         sum = sum - abs(a[i]);
	   //     }
	   // }
	   // cout<<sum<<endl;
	}
	return 0;
}
