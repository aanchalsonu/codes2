/*
Chef lives in a huge apartment building with NN floors, numbered 00 (ground floor) through NN (terrace). Unfortunately, it has only one lift. We say that when the lift travels from a floor aa to a floor bb, it travels |b-a|∣b−a∣ floors.

Initially, the lift is on the ground floor. Then, it receives QQ requests (numbered 11 through QQ). For each valid ii, the ii-th request is for the lift to move from its current floor to a source floor f_if 
 , where some people enter the lift, and then move to a destination floor d_id 
 , where they exit the lift. The lift should not stop anywhere in between moving to the floor f_if 

  or from the floor f_if 
to the floor d_id
 . The lift must serve the requests sequentially, i.e. completely fulfill request 11, then request 22 and so on. The lift does not move anywhere after serving the final request.

Find the total number of floors the lift needs to travel to fulfill all the requests.
*/

#include <iostream>
using namespace std;

int main() {
	// your code goes here
	long int t,n,q,c,i,le;
	cin>>t;
	while(t--)
	{
	    cin>>n>>q;
	    c=0;
	   // le=0;
	   // while(q--)
	   // {
	   //     long int a[n];
	   //     for(i=0;i<n;i++)
	   //     cin>>a[i];
	   //     c = c + (le-a[0]);
	   //     if(c<0)
	   //     {
	   //         c=0;
	   //         c= c+ a[0];
	   //     }
	   //     for(i=1;i<n;i++)
	   //     {
	   //         if(a[i]-a[i-1] < 0 )
	   //         {
	   //             c = c + (-1*(a[i]-a[i-1]));
	   //         }
	   //         else
	   //         c = c + (a[i]-a[i-1]);
	   //     }
	   //     le = a[n-1];
	   // }
	   // cout<<c<<endl;
	   
	   
	   
	   long int a[2*q];
	   for(i=0;i<(2*q);i++)
	   {
	       cin>>a[i];
	   }
	   for(i=0;i<(2*q-1);i++)
	   {
	       c = c + abs(a[i]-a[i+1]);
	   }
	   
	   
	   cout<<c+a[0]<<endl;
	   
	   
	}
	
	return 0;
}


