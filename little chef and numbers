/*
Little chef has just been introduced to the world of numbers! While experimenting with addition and multiplication operations, the little chef 
came up with the following problem:

Given an array A of non-negative integers, how many pairs of indices i and j exist such that A[i]*A[j] > A[i]+A[j] where i < j .

Now being a learner, little chef isn't able to solve this problem efficiently and hence turns to you for help.

Input
First line of input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the number
of integers in the array. The next line contains N space separated integers where the ith integer represents A[i].
Note : There may be trailing spaces on each line of input.

*/


// #include <iostream>
// using namespace std;

// int main() {
// 	// your code goes here
	
	
// 	long int t,i,j,n,c;
// 	cin>>t;
// 	while(t--)
// 	{
// 	    cin>>n;
// 	    long int a[n];
// 	    for(i=0;i<n;i++)
// 	    cin>>a[i];
// 	    c=0;
// 	    for(i=0;i<n;i++)
// 	    {
// 	        for(j=i+1;j<n;j++)
// 	        {
// 	            if((a[i]*a[j]) > (a[i]+a[j]))
// 	            c++;
// 	        }
// 	    }
// 	    cout<<c<<endl;
// 	}
	
// 	return 0;
// }









#include <iostream>
#include <algorithm>
using namespace std;
// for every i, we'll check from j=i+1 to n since i<j
// in total you can pick nC2=n(n-1)/2 pairs
// if a[i] is 1 or 0, there are n-i-1 non-pairs (0-indexed)
// if a[i] is 2, a[j] is 2 is a non-pair. if there are k 2s in a, then you can choose k(k-1)/2 pairs
// if a[i] is x, a[j] is 1 or 0 is a non-pair. instead of using inner loop in O(n^2), we could store the indices of 1 and 0 and sum the (length - lower_bound) which takes O(n)

void solve(){
    long long n, a[100001];
    cin>>n;
    long long res = n*(n-1)/2;
    long long twoc = 0;
    int store[100001], len=0;
    for(int i=0; i<n; i++) {
        cin>>a[i];
        if (a[i] == 1 || a[i] == 0) {
            res -= n-i-1;
            store[len++] = i;
        }
        else if (a[i] == 2) twoc++;
    }
    res -= twoc*(twoc-1)/2;
    
    for(int i=0; i<n; i++){
        if (a[i] >= 2) {
            res -= len - (lower_bound(store,store+len,i)-store);
        }
    }
    cout << res << '\n';
}
int main() {
	int tt;
	cin>>tt;
	while(tt--) {
	    solve();
	}
	return 0;
}
